@{
  // ✅ Determine if front page assets should be loaded
  bool isFront = ViewData["isFront"] is bool isFrontValue ? isFrontValue : false;
  ViewData["main"] = isFront ? "front-" : "";
  ViewData["frontVar"] = isFront ? "Front" : "";

  // ✅ Determine Layout Type (Compact/Fluid)
  ViewData["contentType"] = ViewData["container"] is string container && container == "container-xxl" ? "layout-compact" :
  "layout-wide";
}

@inject IHttpContextAccessor httpContextAccessor

<!DOCTYPE html>
<html lang="en" class='light-style @(ViewData["navbarType"] is string navbarType ? navbarType : "")
         @(ViewData["menuFixed"] is string menuFixed ? menuFixed : "")
         @(ViewData["menuCollapsed"] is string menuCollapsed ? menuCollapsed : "")
         @(ViewData["contentType"] is string contentType ? contentType : "")
         @(ViewData["footerFixed"] is string footerFixed ? footerFixed : "")
         @(ViewData["customizerHidden"] is string customizerHidden ? customizerHidden : "")' dir="ltr"
  data-theme="theme-default" data-assets-path='@((httpContextAccessor.HttpContext?.Request.PathBase ?? "") + "/")'
  data-template='@(isFront ? "front-page" : (Convert.ToBoolean(TempData.Peek("menuHorizontal")?.ToString()) ? "horizontal-menu-template" : "vertical-menu-template"))'>

<head>
  <meta charset="utf-8" />
  <meta name="viewport"
    content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />

  @* ✅ Meta Information *@
  @{
    string title = ViewData["Title"] as string ?? "Welcome";
    string appName = TempData.Peek("appName") as string ?? "RestoHive_Reseller";
    string productPage = TempData.Peek("productPage") as string ?? "/";
  }
  <title>@title | @appName </title>
  <meta name="description" content="Your description here" />
  <link rel="canonical" href='@productPage'>

  @* ✅ Favicon *@
  <link rel="icon" type="image/x-icon" href="~/img/favicon/logo.png" />

  @* ✅ Core Styles *@
  @await Html.PartialAsync("Sections/_Styles" + ViewData["frontVar"])

  @* ✅ Vendor Styles (External Libraries) *@
  @RenderSection("VendorStyles", required: false)

  @* ✅ Page Specific Styles *@
  @RenderSection("PageStyles", required: false)

  @* ✅ Include Scripts (Customizer, Helper, Analytics, Config) *@
  @await Html.PartialAsync("Sections/_ScriptsIncludes" + ViewData["frontVar"])
</head>

<body>
  @* ✅ Layout Content Render (Each Page's Content will be placed here) *@
  @RenderBody()

  @* ✅ Core Scripts *@
  @await Html.PartialAsync("Sections/_Scripts" + ViewData["frontVar"])

  @* ✅ Vendor Scripts *@
  @RenderSection("VendorScripts", required: false)

  @* ✅ Main JavaScript File *@
  <script src='~/js/@ViewData["main"]main.js'></script>

  @* ✅ Page Specific Scripts *@
  @RenderSection("PageScripts", required: false)

  <!-- Cart Sidebar -->
  <div class="offcanvas offcanvas-end" tabindex="-1" id="shoppingCart" aria-labelledby="shoppingCartLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="shoppingCartLabel">Your Cart</h5>
      <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body p-0">
      <div class="d-flex flex-column h-100">
        <div class="flex-grow-1 overflow-auto" id="cart-items">
          <!-- Cart items will be dynamically added here -->
          <div class="text-center p-4 text-muted">
            <i class='bx bx-cart-download bx-lg mb-2'></i>
            <p class="mb-0">Your cart is empty</p>
          </div>
        </div>
        <div class="border-top p-3">
          <div class="d-flex justify-content-between mb-2">
            <span>Subtotal:</span>
            <span id="cart-subtotal">$0.00</span>
          </div>
          <button class="btn btn-primary w-100" id="checkout-btn">
            Proceed to Checkout
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Cart Toast -->
  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="cart-toast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="d-flex">
        <div class="toast-body">
          <i class='bx bx-check-circle me-2'></i> Item added to cart
        </div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
    </div>
  </div>
  
  <script>
    // Initialize cart from localStorage or empty array
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // Update cart count in navbar
    function updateCartCount() {
      const cartCount = document.getElementById('cart-count');
      if (cartCount) {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        cartCount.textContent = totalItems;
        cartCount.style.display = totalItems > 0 ? 'flex' : 'none';
      }
    }
    
    // Render cart items in the sidebar
    function renderCart() {
      const cartContainer = document.getElementById('cart-items');
      const cartSubtotal = document.getElementById('cart-subtotal');
      const checkoutBtn = document.getElementById('checkout-btn');
      
      if (!cartContainer) return;
      
      if (cart.length === 0) {
        cartContainer.innerHTML = `
          <div class="text-center p-4 text-muted">
            <i class='bx bx-cart-download bx-lg mb-2'></i>
            <p class="mb-0">Your cart is empty</p>
          </div>
        `;
        if (checkoutBtn) checkoutBtn.disabled = true;
        return;
      }
      
      let subtotal = 0;
      let itemsHtml = '';
      
      cart.forEach((item, index) => {
        const itemTotal = item.price * item.quantity;
        subtotal += itemTotal;
        
        itemsHtml += `
          <div class="card border-0 border-bottom rounded-0" data-product-id="${item.id}">
            <div class="card-body">
              <div class="d-flex align-items-center">
                <img src="${item.image || '/img/discounts/pc.png'}" alt="${item.name}" class="rounded me-3" width="60" height="60">
                <div class="flex-grow-1">
                  <h6 class="mb-1">${item.name}</h6>
                  <div class="d-flex align-items-center">
                    <button class="btn btn-sm btn-outline-secondary change-quantity" data-action="decrease" data-index="${index}">-</button>
                    <span class="mx-2">${item.quantity}</span>
                    <button class="btn btn-sm btn-outline-secondary change-quantity" data-action="increase" data-index="${index}">+</button>
                    <span class="ms-auto fw-bold">$${itemTotal.toFixed(2)}</span>
                  </div>
                </div>
                <button type="button" class="btn-close remove-item" data-index="${index}" aria-label="Remove"></button>
              </div>
            </div>
          </div>
        `;
      });
      
      cartContainer.innerHTML = itemsHtml;
      if (cartSubtotal) cartSubtotal.textContent = `$${subtotal.toFixed(2)}`;
      if (checkoutBtn) checkoutBtn.disabled = false;
      
      // Add event listeners to quantity buttons
      document.querySelectorAll('.change-quantity').forEach(button => {
        button.addEventListener('click', function() {
          const action = this.getAttribute('data-action');
          const index = parseInt(this.getAttribute('data-index'));
          updateQuantity(index, action);
        });
      });
      
      // Add event listeners to remove buttons
      document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
          const index = parseInt(this.getAttribute('data-index'));
          removeFromCart(index);
        });
      });
    }
    
    // Update item quantity
    function updateQuantity(index, action) {
      if (action === 'increase') {
        cart[index].quantity += 1;
      } else if (action === 'decrease') {
        if (cart[index].quantity > 1) {
          cart[index].quantity -= 1;
        } else {
          removeFromCart(index);
          return;
        }
      }
      
      saveCart();
      updateCartCount();
      renderCart();
    }
    
    // Remove item from cart
    function removeFromCart(index) {
      cart.splice(index, 1);
      saveCart();
      updateCartCount();
      renderCart();
    }
    
    // Save cart to localStorage
    function saveCart() {
      localStorage.setItem('cart', JSON.stringify(cart));
    }
    
    // Initialize cart on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Only initialize if we're not on the store page
      if (!document.querySelector('.product-card')) {
        updateCartCount();
        renderCart();
        
        // Handle cart icon click
        const cartIcon = document.getElementById('cart-icon');
        if (cartIcon) {
          cartIcon.addEventListener('click', function(e) {
            e.preventDefault();
            const shoppingCart = new bootstrap.Offcanvas(document.getElementById('shoppingCart'));
            shoppingCart.show();
          });
        }
        
        // Handle checkout button click
        const checkoutBtn = document.getElementById('checkout-btn');
        if (checkoutBtn) {
          checkoutBtn.addEventListener('click', function() {
            // Redirect to store page for checkout
            window.location.href = '/Store';
          });
        }
      }
    });
  </script>

  @* ✅ Custom Scripts *@
  @RenderSection("Scripts", required: false)

</body>

</html>
